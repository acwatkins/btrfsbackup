#!/usr/bin/env python3

import argparse
import datetime
import logging
import os
import shutil
import subprocess

logging.basicConfig(level=logging.DEBUG)

def runCommand(command):
	logging.info("Running command: " + command)
	try:
		subprocess.check_call(command, shell=True)
	except subprocess.CalledProcessError:
		logging.error("Error running command")
		return False
	except OSError:
		logging.error("Executable not found")
		return False
	return True

def createSnapshot(source, destination, postfix, keepCount):
	snapshotName = '%Y-%m-%d_%H:%M:%S_' + postfix
	snapshotName = datetime.datetime.now().strftime(snapshotName)
	runCommand("btrfs subvolume snapshot " + source + " " + destination + "/" + snapshotName)
	
def cleanupOldBackups(path, postfix, keepCount):
	currentCount = 0
	for backup in os.listdir(path):
		if (backup.endswith(postfix)):
			currentCount += 1
			if (currentCount > keepCount):
				runCommand("btrfs subvolume delete " + backup)

def sendBackup(source, destination, sshPath, remoteDestination):
	newBackupSnapshot = destination + "/backup-new"
	backupSnapshot = destination + "/backup"
	newRemoteSnapshot = remoteDestination + "/backup-new"
	remoteSnapshot = remoteDestination + "/backup"
	if (os.path.isdir(newBackupSnapshot)):
		runCommand("btrfs subvolume delete " + newBackupSnapshot)
	if (os.path.isdir(backupSnapshot)):
		runCommand("btrfs subvolume snapshot -r " + source + " " + newBackupSnapshot)
		runCommand("sync")
		success = runCommand("btrfs send -p " + backupSnapshot + " " + newBackupSnapshot + " | ssh " + sshPath + " 'btrfs receive " + remoteDestination + "'")
		if (success):
			runCommand("btrfs subvolume delete " + backupSnapshot)
			shutil.move(newBackupSnapshot, backupSnapshot)
			runCommand("ssh " + sshPath + " 'btrfs subvolume delete " + remoteSnapshot)
			runCommand("ssh " + sshPath + " 'mv " + newRemoteSnapshot + " " + remoteSnapshot + "'")
	else:
		runCommand("btrfs subvolume snapshot -r " + source + " " + backupSnapshot)
		runCommand("sync")
		runCommand("btrfs send " + backupSnapshot + " | ssh " + sshPath + " 'btrfs receive " + remoteDestination + "'")

# btrfsbackup source dest --prefix hourly --keep 4

parser = argparse.ArgumentParser(description='Snapshot and backup to another computer')
parser.add_argument('source', action='store', help='The path to backup')
parser.add_argument('destination', action='store', help='Path to store snapshots')
parser.add_argument('--postfix', '-p', action='store', help='Value to be appended to the date YYYY-MM-DD_HH:MM:SS_postfix')
parser.add_argument('--keep', '-k', action='store', help='Number of snapshots to keep with this prefix')
parser.add_argument('--sshServer', '-s', action='store', default=None, help='User and destination IP, e.g. user@10.0.0.5')
parser.add_argument('--remoteDestination', '-r', action='store', default=None, help='Location to send the backup to')

args = parser.parse_args()

if (args.remoteDestination != None and args.sshServer != None):
	sendBackup(args.source, args.destination, args.sshServer, args.remoteDestination)
else:
	createSnapshot(args.source, args.destination, args.postfix, args.keep)
	cleanupOldBackups(args.destination, args.postfix, int(args.keep))
